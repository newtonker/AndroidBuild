import re

sources_regex = re.compile(r'-sources.jar$', re.IGNORECASE)
base_name_regex = re.compile(r'\.(jar|aar)$', re.IGNORECASE)
file_name_regex = re.compile(r'^.*/([^/]+)\.(jar|aar)$', re.IGNORECASE)
cache_delimiter = '--'

jars = []
aars = []
sources = {}

for jar in glob(['*.jar']):
  name = file_name_regex.sub(r'\1', jar)
  if name.endswith('-sources.jar'):
    sources[sources_regex.sub('', name)] = name
  else:
    jars.append(name)

for aar in glob(['*.aar']):
  name = file_name_regex.sub(r'\1', aar)
  aars.append(name)

for jar in jars:
  basename = base_name_regex.sub('', jar)

  maven_coords = None
  if (cache_delimiter in basename):
    parts = basename.split(cache_delimiter)
    if (len(parts) == 4):
      maven_coords = parts[0] + ":" + parts[1] + ":jar:" + parts[3] + ":" + parts[2]
    else:
      maven_coords = parts[0] + ":" + parts[1] + ":jar:" + parts[2]

  if sources.get(basename, None) is not None:
    prebuilt_jar(
      name = jar,
      binary_jar = jar,
      source_jar = sources[basename],
      maven_coords = maven_coords,
      visibility = ['PUBLIC'],
    )
  else:
    prebuilt_jar(
      name = jar,
      binary_jar = jar,
      maven_coords = maven_coords,
      visibility = ['PUBLIC'],
    )

for aar in aars:
  basename = base_name_regex.sub('', aar)
  if sources.get(basename, None) is not None:
    android_prebuilt_aar(
      name = aar,
      aar = aar,
      source_jar = sources[basename],
      visibility = ['PUBLIC'],
    )
  else:
    android_prebuilt_aar(
      name = aar,
      aar = aar,
      visibility = ['PUBLIC'],
    )
